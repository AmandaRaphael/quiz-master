{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/fbw-07-2/spa/quiz-AmandaRaphael/src/context/MyProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport MyContext from \"./MyContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [selected, setSelected] = useState(false);\n  const [nextQuestion, setNextQuestion] = useState(1);\n  const [buttonClass, setButtonClass] = useState(\"button\");\n  const [showQ, setQShow] = useState(false);\n  const [select, setSelect] = useState(\"5\"); // const randomQuestionsArray = questionsArray.sort(() => 0.5 - Math.random());\n  // const answerButtonHandler = (e) => {\n  //   setSelected(true); //BUG:when answer key is clicked for the first time next question is showed and this happens only for the first click.\n  //   e.target.classList.add(\"selectedButton\");\n  // };\n  // const answerButtons = randomQuestionsArray[nextQuestion - 1].answers\n  //   .sort(() => 0.5 - Math.random())\n  //   .map((ans, i) => {\n  //     return (\n  //       <button key={i} onClick={answerButtonHandler} className={buttonClass}>\n  //         {ans}\n  //       </button>\n  //     );\n  //   });\n  // const showQuestion = (\n  //   <div>\n  //     <p className=\"padding\">\n  //       {randomQuestionsArray[nextQuestion - 1].question}\n  //       {nextQuestion}\n  //     </p>\n  //     <div className=\"answerButton flex\">{answerButtons}</div>\n  //   </div>\n  // );\n  // const nextQHandler = () => {\n  //   console.log(\"bext\");\n  //   if (nextQuestion < randomQuestionsArray.length) {\n  //     setNextQuestion((nextQuestion) => nextQuestion + 1);\n  //     setSelected(false);\n  //     //answerButtons.map((button) => setButtonClass(\"button\"));\n  //     setButtonClass(\"button\"); //this didnt work the way i expected\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: {\n      select,\n      nextQuestion,\n      setNextQuestion,\n      buttonClass,\n      setButtonClass,\n      selected,\n      setSelected,\n      showQ,\n      setQShow\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyProvider, \"Yk9/WgGszQu+/Yz+hlXcSx+V3sQ=\");\n\n_c = MyProvider;\nexport default MyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyProvider\");","map":{"version":3,"sources":["/home/user/Documents/fbw-07-2/spa/quiz-AmandaRaphael/src/context/MyProvider.jsx"],"names":["useState","MyContext","MyProvider","children","selected","setSelected","nextQuestion","setNextQuestion","buttonClass","setButtonClass","showQ","setQShow","select","setSelect"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AACA,MAAMC,UAAU,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,QAAD,CAA9C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,GAAD,CAApC,CALmC,CAMnC;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE,QAAC,SAAD,CAAW,QAAX;AACE,IAAA,KAAK,EAAE;AACLY,MAAAA,MADK;AAELN,MAAAA,YAFK;AAGLC,MAAAA,eAHK;AAILC,MAAAA,WAJK;AAKLC,MAAAA,cALK;AAMLL,MAAAA,QANK;AAOLC,MAAAA,WAPK;AAQLK,MAAAA,KARK;AASLC,MAAAA;AATK,KADT;AAAA,cAaGR;AAbH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA1DD;;GAAMD,U;;KAAAA,U;AA4DN,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\nimport MyContext from \"./MyContext\";\nconst MyProvider = ({ children }) => {\n  const [selected, setSelected] = useState(false);\n  const [nextQuestion, setNextQuestion] = useState(1);\n  const [buttonClass, setButtonClass] = useState(\"button\");\n  const [showQ, setQShow] = useState(false);\n  const [select, setSelect] = useState(\"5\");\n  // const randomQuestionsArray = questionsArray.sort(() => 0.5 - Math.random());\n\n  // const answerButtonHandler = (e) => {\n  //   setSelected(true); //BUG:when answer key is clicked for the first time next question is showed and this happens only for the first click.\n  //   e.target.classList.add(\"selectedButton\");\n  // };\n\n  // const answerButtons = randomQuestionsArray[nextQuestion - 1].answers\n  //   .sort(() => 0.5 - Math.random())\n  //   .map((ans, i) => {\n  //     return (\n  //       <button key={i} onClick={answerButtonHandler} className={buttonClass}>\n  //         {ans}\n  //       </button>\n  //     );\n  //   });\n  // const showQuestion = (\n  //   <div>\n  //     <p className=\"padding\">\n  //       {randomQuestionsArray[nextQuestion - 1].question}\n  //       {nextQuestion}\n  //     </p>\n  //     <div className=\"answerButton flex\">{answerButtons}</div>\n  //   </div>\n  // );\n\n  // const nextQHandler = () => {\n  //   console.log(\"bext\");\n  //   if (nextQuestion < randomQuestionsArray.length) {\n  //     setNextQuestion((nextQuestion) => nextQuestion + 1);\n  //     setSelected(false);\n  //     //answerButtons.map((button) => setButtonClass(\"button\"));\n  //     setButtonClass(\"button\"); //this didnt work the way i expected\n  //   }\n  // };\n  return (\n    <MyContext.Provider\n      value={{\n        select,\n        nextQuestion,\n        setNextQuestion,\n        buttonClass,\n        setButtonClass,\n        selected,\n        setSelected,\n        showQ,\n        setQShow,\n      }}\n    >\n      {children}\n    </MyContext.Provider>\n  );\n};\n\nexport default MyProvider;\n"]},"metadata":{},"sourceType":"module"}
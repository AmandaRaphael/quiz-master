{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/fbw-07-2/spa/quiz-AmandaRaphael/src/context/MyProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport MyContext from \"./MyContext\";\nimport questionsArray from \"../data/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [selected, setSelected] = useState(false);\n  const [nextQuestion, setNextQuestion] = useState(1);\n  const [buttonClass, setButtonClass] = useState(\"button\");\n  const [showQ, setQShow] = useState(false);\n\n  const startButtonHandle = () => {\n    setQShow(true);\n  };\n\n  console.log('object');\n  const randomQuestionsArray = questionsArray.sort(() => 0.5 - Math.random());\n\n  const answerButtonHandler = e => {\n    e.preventDefault();\n    setSelected(true); //BUG:when answer key is clicked for the first time next question is showed and this happens only for the first click.\n\n    e.target.classList.add(\"selectedButton\");\n  };\n\n  const answerButtons = randomQuestionsArray[nextQuestion - 1].answers.sort(() => 0.5 - Math.random()).map((ans, i) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: answerButtonHandler,\n      className: buttonClass,\n      children: ans\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this);\n  });\n\n  const showQuestion = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"padding\",\n      children: [randomQuestionsArray[nextQuestion - 1].question, nextQuestion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answerButton flex\",\n      children: answerButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n\n  const nextQHandler = () => {\n    console.log(\"bext\");\n\n    if (nextQuestion < randomQuestionsArray.length) {\n      setNextQuestion(nextQuestion => nextQuestion + 1);\n      setSelected(false); //answerButtons.map((button) => setButtonClass(\"button\"));\n\n      setButtonClass(\"button\"); //this didnt work the way i expected\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: {\n      randomQuestionsArray,\n      nextQuestion,\n      setNextQuestion,\n      showQuestion,\n      nextQHandler,\n      selected,\n      setSelected,\n      showQ,\n      startButtonHandle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyProvider, \"sNBrhqHByvh3m9x+wLpB84fYBkE=\");\n\n_c = MyProvider;\nexport default MyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyProvider\");","map":{"version":3,"sources":["/home/user/Documents/fbw-07-2/spa/quiz-AmandaRaphael/src/context/MyProvider.jsx"],"names":["useState","MyContext","questionsArray","MyProvider","children","selected","setSelected","nextQuestion","setNextQuestion","buttonClass","setButtonClass","showQ","setQShow","startButtonHandle","console","log","randomQuestionsArray","sort","Math","random","answerButtonHandler","e","preventDefault","target","classList","add","answerButtons","answers","map","ans","i","showQuestion","question","nextQHandler","length"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;;AACA,MAAMC,UAAU,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,QAAD,CAA9C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;;AACA,QAAMa,iBAAiB,GAAG,MAAM;AAC9BD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAMC,oBAAoB,GAAGd,cAAc,CAACe,IAAf,CAAoB,MAAM,MAAMC,IAAI,CAACC,MAAL,EAAhC,CAA7B;;AAEA,QAAMC,mBAAmB,GAAIC,CAAD,IAAO;AACjCA,IAAAA,CAAC,CAACC,cAAF;AACAhB,IAAAA,WAAW,CAAC,IAAD,CAAX,CAFiC,CAEd;;AACnBe,IAAAA,CAAC,CAACE,MAAF,CAASC,SAAT,CAAmBC,GAAnB,CAAuB,gBAAvB;AACD,GAJD;;AAMA,QAAMC,aAAa,GAAGV,oBAAoB,CAACT,YAAY,GAAG,CAAhB,CAApB,CAAuCoB,OAAvC,CACnBV,IADmB,CACd,MAAM,MAAMC,IAAI,CAACC,MAAL,EADE,EAEnBS,GAFmB,CAEf,CAACC,GAAD,EAAMC,CAAN,KAAY;AACf,wBACE;AAAgB,MAAA,OAAO,EAAEV,mBAAzB;AAA8C,MAAA,SAAS,EAAEX,WAAzD;AAAA,gBACGoB;AADH,OAAaC,CAAb;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GARmB,CAAtB;;AASA,QAAMC,YAAY,gBAChB;AAAA,4BACE;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA,iBACGf,oBAAoB,CAACT,YAAY,GAAG,CAAhB,CAApB,CAAuCyB,QAD1C,EAEGzB,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,gBAAoCmB;AAApC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAUA,QAAMO,YAAY,GAAG,MAAM;AACzBnB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,QAAIR,YAAY,GAAGS,oBAAoB,CAACkB,MAAxC,EAAgD;AAC9C1B,MAAAA,eAAe,CAAED,YAAD,IAAkBA,YAAY,GAAG,CAAlC,CAAf;AACAD,MAAAA,WAAW,CAAC,KAAD,CAAX,CAF8C,CAG9C;;AACAI,MAAAA,cAAc,CAAC,QAAD,CAAd,CAJ8C,CAIpB;AAC3B;AACF,GARD;;AASA,sBACE,QAAC,SAAD,CAAW,QAAX;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,oBADK;AAELT,MAAAA,YAFK;AAGLC,MAAAA,eAHK;AAILuB,MAAAA,YAJK;AAKLE,MAAAA,YALK;AAML5B,MAAAA,QANK;AAOLC,MAAAA,WAPK;AAQLK,MAAAA,KARK;AAULE,MAAAA;AAVK,KADT;AAAA,cAcGT;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAhED;;GAAMD,U;;KAAAA,U;AAkEN,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\nimport MyContext from \"./MyContext\";\nimport questionsArray from \"../data/questions\";\nconst MyProvider = ({ children }) => {\n  const [selected, setSelected] = useState(false);\n  const [nextQuestion, setNextQuestion] = useState(1);\n  const [buttonClass, setButtonClass] = useState(\"button\");\n  const [showQ, setQShow] = useState(false);\n  const startButtonHandle = () => {\n    setQShow(true);\n  };\n\n  console.log('object')\n  const randomQuestionsArray = questionsArray.sort(() => 0.5 - Math.random());\n\n  const answerButtonHandler = (e) => {\n    e.preventDefault();\n    setSelected(true); //BUG:when answer key is clicked for the first time next question is showed and this happens only for the first click.\n    e.target.classList.add(\"selectedButton\");\n  };\n\n  const answerButtons = randomQuestionsArray[nextQuestion - 1].answers\n    .sort(() => 0.5 - Math.random())\n    .map((ans, i) => {\n      return (\n        <button key={i} onClick={answerButtonHandler} className={buttonClass}>\n          {ans}\n        </button>\n      );\n    });\n  const showQuestion = (\n    <div>\n      <p className=\"padding\">\n        {randomQuestionsArray[nextQuestion - 1].question}\n        {nextQuestion}\n      </p>\n      <div className=\"answerButton flex\">{answerButtons}</div>\n    </div>\n  );\n\n  const nextQHandler = () => {\n    console.log(\"bext\");\n    if (nextQuestion < randomQuestionsArray.length) {\n      setNextQuestion((nextQuestion) => nextQuestion + 1);\n      setSelected(false);\n      //answerButtons.map((button) => setButtonClass(\"button\"));\n      setButtonClass(\"button\"); //this didnt work the way i expected\n    }\n  };\n  return (\n    <MyContext.Provider\n      value={{\n        randomQuestionsArray,\n        nextQuestion,\n        setNextQuestion,\n        showQuestion,\n        nextQHandler,\n        selected,\n        setSelected,\n        showQ,\n\n        startButtonHandle,\n      }}\n    >\n      {children}\n    </MyContext.Provider>\n  );\n};\n\nexport default MyProvider;\n"]},"metadata":{},"sourceType":"module"}